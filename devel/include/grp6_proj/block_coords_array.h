// Generated by gencpp from file grp6_proj/block_coords_array.msg
// DO NOT EDIT!


#ifndef GRP6_PROJ_MESSAGE_BLOCK_COORDS_ARRAY_H
#define GRP6_PROJ_MESSAGE_BLOCK_COORDS_ARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <grp6_proj/block_coords.h>

namespace grp6_proj
{
template <class ContainerAllocator>
struct block_coords_array_
{
  typedef block_coords_array_<ContainerAllocator> Type;

  block_coords_array_()
    : coords()  {
    }
  block_coords_array_(const ContainerAllocator& _alloc)
    : coords(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::grp6_proj::block_coords_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::grp6_proj::block_coords_<ContainerAllocator> >::other >  _coords_type;
  _coords_type coords;





  typedef boost::shared_ptr< ::grp6_proj::block_coords_array_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::grp6_proj::block_coords_array_<ContainerAllocator> const> ConstPtr;

}; // struct block_coords_array_

typedef ::grp6_proj::block_coords_array_<std::allocator<void> > block_coords_array;

typedef boost::shared_ptr< ::grp6_proj::block_coords_array > block_coords_arrayPtr;
typedef boost::shared_ptr< ::grp6_proj::block_coords_array const> block_coords_arrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::grp6_proj::block_coords_array_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::grp6_proj::block_coords_array_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace grp6_proj

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'grp6_proj': ['/home/ros/catkin_ws/src/grp6_proj/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::grp6_proj::block_coords_array_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::grp6_proj::block_coords_array_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::grp6_proj::block_coords_array_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::grp6_proj::block_coords_array_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grp6_proj::block_coords_array_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grp6_proj::block_coords_array_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::grp6_proj::block_coords_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8b5f64b5842ecf35ee87d85a0105c1ad";
  }

  static const char* value(const ::grp6_proj::block_coords_array_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8b5f64b5842ecf35ULL;
  static const uint64_t static_value2 = 0xee87d85a0105c1adULL;
};

template<class ContainerAllocator>
struct DataType< ::grp6_proj::block_coords_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "grp6_proj/block_coords_array";
  }

  static const char* value(const ::grp6_proj::block_coords_array_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::grp6_proj::block_coords_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "block_coords[] coords\n\
================================================================================\n\
MSG: grp6_proj/block_coords\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const ::grp6_proj::block_coords_array_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::grp6_proj::block_coords_array_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.coords);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct block_coords_array_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::grp6_proj::block_coords_array_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::grp6_proj::block_coords_array_<ContainerAllocator>& v)
  {
    s << indent << "coords[]" << std::endl;
    for (size_t i = 0; i < v.coords.size(); ++i)
    {
      s << indent << "  coords[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::grp6_proj::block_coords_<ContainerAllocator> >::stream(s, indent + "    ", v.coords[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRP6_PROJ_MESSAGE_BLOCK_COORDS_ARRAY_H
